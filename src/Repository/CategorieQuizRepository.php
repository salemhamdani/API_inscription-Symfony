<?php

namespace App\Repository;

/**
 * CategorieQuizRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategorieQuizRepository extends \Doctrine\ORM\EntityRepository
{

      public function findByArchive($etat)
    {
        return $this->findBy(array('archive' => $etat),array('intitule' => 'ASC'));

    }

        public function findAll()
    {
        return $this->findBy(array(),array('intitule' => 'ASC'));

    }
        public function getRang()
    {
        $queryBuilder = $this->createQueryBuilder('f');
        $queryBuilder->select($queryBuilder->expr()->max('f.rang'));
        return (int)$queryBuilder->getQuery()->getScalarResult()[0][1] + 1;
    }
    
     public function getByCandidat($candidat)
    {
        $qb =  $this->createQueryBuilder('cat')
                            ->leftJoin('cat.quizs', 'quiz')
                            ->leftJoin('quiz.candidatQuiz', 'candidatQuiz')
                            ->leftJoin('candidatQuiz.candidat', 'candidat')
                            ->where('candidat.id = :_CANDIDAT')
                            ->setParameter('_CANDIDAT', $candidat->getId())
                            ->getQuery()->getResult();

        return $qb;
    }

 public function isDoublon($valeursConditions, $signesConditions){

        // Création du QueryBuilder :
        $queryBuilder = $this->createQueryBuilder('n');

        // Récupération des informations :
        $i = 0;
        foreach ($valeursConditions as $key => $value) {
            if ($i == 0) {
                $queryBuilder->where('n.' . $key . ' ' . $signesConditions[$i] . ' :' . $key);
            }else{
                $queryBuilder->andWhere('n.' . $key . ' ' . $signesConditions[$i] . ' :' . $key);
            }
            ++$i;
        }

        // Renvoi du résultat :
        return ! empty($queryBuilder
            ->setParameters($valeursConditions)
            ->getQuery()
            ->getResult());
    }

}
